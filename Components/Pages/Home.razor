@page "/"
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>@Item?.Name</PageTitle>



@if(Item is null){
    <RadzenText TextStyle="TextStyle.DisplayH1">Welcome to Chrona</RadzenText>
    <RadzenText TextStyle="TextStyle.DisplayH4">Please select a page from the menu to display</RadzenText>
}else{
    @if (!Item.IsPicture)
    {
        <RadzenText TextStyle="TextStyle.DisplayH3">@Item.Name</RadzenText>
        <RadzenMarkdown  AllowHtml="true" class="rz-p-12 rz-border" Style="height: 85vh;" Text="@(GetFileContents())"></RadzenMarkdown>
    }
    else 
    {
        <RadzenImage Style="height: 85vh;" Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(getImageData(Item))}")" />
    }
}

@code {

    [CascadingParameter(Name = "MarkdownPath")]
    public MenuItem? Item { get; set; }

    [CascadingParameter(Name = "MenuItems")]
    public List<MenuItem>? Items { get; set; }

    [CascadingParameter(Name = "OnPathChange")]
    public required Action<MenuItem> OnPathChange { get; set; }

    List<string> imageExtensions = [".png", ".jpg", ".jpeg", ".webp"];
    private IDisposable registration;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration = Navigation.RegisterLocationChangingHandler(LocationChangingHandler);
        }
    }

    private ValueTask LocationChangingHandler(LocationChangingContext args)
    {
        TriggerPathChange(args.TargetLocation.Replace($"{Navigation.BaseUri}?p=", ""));
        args.PreventNavigation();
        return ValueTask.CompletedTask;
    }

    public void Dispose() => registration?.Dispose();

    private void TriggerPathChange(string token){
        var item = GetMenuItem(System.Net.WebUtility.UrlDecode(token));
        if (item == null) return;
        OnPathChange?.Invoke(item);
    }

    private string GetFileContents()
    {
        if (Item is null) return "";

        if (!File.Exists(Item.Path)) return "";

        if (Item.Path == "") return Item.Path;

        string markdown = File.ReadAllText(Item.Path);

        return RefineMarkdown(markdown);
    }

    private string RefineMarkdown(string markdown)
    {

        if (Items is null) return markdown;

        List<MarkdownToken> tokens = [];

        if (markdown.Split("![[").Length > 1)
        {
            foreach (var e in markdown.Split("![[").Skip(1))
            {
                tokens.Add(new MarkdownToken(e.Split("]]")[0], true));
            }
        }

        if (markdown.Split("[[").Length > 1)
        {
            foreach (var e in markdown.Split("[[").Skip(1))
            {
                if (!tokens.Any(a => a.Value == e.Split("]]")[0]))
                    tokens.Add(new MarkdownToken(e.Split("]]")[0], false));
            }
        }

        foreach (var t in tokens)
        {
            var item = GetMenuItem(System.Net.WebUtility.HtmlDecode(t.StrippedValue));
            if (item is null) continue;

            if (!t.IsLink)
            {
                string newValue = $"""<a class="rz-link" id="{t.Value}" href="./?p={t.StrippedValue}">{t.StrippedValue}</a>""";
                markdown = markdown.Replace(t.QualifiedValue, newValue);
            }
            else
            {
                string newValue = $"""<img height=480 src="data:image/jpeg;base64,{Convert.ToBase64String(getImageData(item))}" />""";
                markdown = markdown.Replace(t.QualifiedValue, newValue);
            }

        }

        return markdown;
    }

    private MenuItem? GetMenuItem(string token)
    {

        MenuItem? RecursiveSearch(MenuItem root)
        {
            foreach (var item in root.Items)
            {
                if (!item.IsFolder)
                {
                    if (item.IsPicture && item.Name + item.Extension == token)
                        return item;

                    if (item.Name == token)
                        return item;
                }
                else
                {
                    var result = RecursiveSearch(item);
                    if (result is not null) return result;
                }
            }
            return null;
        }

        foreach (var item in Items!)
        {
            if (!item.IsFolder)
            {
                if (item.IsPicture && item.Name + item.Extension == token)
                    return item;

                if (item.Name == token)
                    return item;
            }
            else
            {
                var result = RecursiveSearch(item);
                if (result is not null) return result;
            }
        }

        return null;
    }

    private byte[] getImageData(MenuItem? me)
    {
        if (me is null) return [];

        if (!File.Exists(me.Path)) return [];

        return File.ReadAllBytes(me.Path);
    }
}